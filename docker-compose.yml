version: '3.8'

services:
  # Main API service
  api:
    build:
      context: .
      dockerfile: Dockerfile
    ports:
      - "8000:8000"
    environment:
      - DEBUG=true
      - BYPASS_NFT_GATE=true
      - REAL_DATA_MODE=true
      - DATABASE_URL=postgresql://postgres:password@postgres:5432/nft_trading_bot
      - REDIS_URL=redis://redis:6379/0
      - CELERY_BROKER_URL=redis://redis:6379/0
      - CELERY_RESULT_BACKEND=redis://redis:6379/0
      - SECRET_KEY=dev-secret-key-change-in-production
      - ETHEREUM_RPC_URL=https://eth-mainnet.g.alchemy.com/v2/meq7SLW6jHyi6YxXMEnoZjBXxw1oeSRg
      - PRIVATE_KEY=0x5bbe00a92f0c68caeb23f75dd94b04e6abb53051ccfd1c19726e2de65a62efc8
    depends_on:
      - postgres
      - redis
    volumes:
      - .:/app
    command: uvicorn api.main:app --host 0.0.0.0 --port 8000 --reload
    networks:
      - nft-trading-network

  # Celery worker for background tasks
  worker:
    build:
      context: .
      dockerfile: Dockerfile
    environment:
      - DEBUG=true
      - BYPASS_NFT_GATE=true
      - REAL_DATA_MODE=true
      - DATABASE_URL=postgresql://postgres:password@postgres:5432/nft_trading_bot
      - REDIS_URL=redis://redis:6379/0
      - CELERY_BROKER_URL=redis://redis:6379/0
      - CELERY_RESULT_BACKEND=redis://redis:6379/0
      - SECRET_KEY=dev-secret-key-change-in-production
      - ETHEREUM_RPC_URL=https://eth-mainnet.g.alchemy.com/v2/meq7SLW6jHyi6YxXMEnoZjBXxw1oeSRg
      - PRIVATE_KEY=0x5bbe00a92f0c68caeb23f75dd94b04e6abb53051ccfd1c19726e2de65a62efc8
    depends_on:
      - postgres
      - redis
    volumes:
      - .:/app
    command: celery -A core.celery_app worker --loglevel=info --concurrency=2
    networks:
      - nft-trading-network

  # Celery beat scheduler
  scheduler:
    build:
      context: .
      dockerfile: Dockerfile
    environment:
      - DEBUG=true
      - BYPASS_NFT_GATE=true
      - REAL_DATA_MODE=false
      - DATABASE_URL=postgresql://postgres:password@postgres:5432/nft_trading_bot
      - REDIS_URL=redis://redis:6379/0
      - CELERY_BROKER_URL=redis://redis:6379/0
      - CELERY_RESULT_BACKEND=redis://redis:6379/0
      - SECRET_KEY=dev-secret-key-change-in-production
    depends_on:
      - postgres
      - redis
    volumes:
      - .:/app
    command: celery -A core.celery_app beat --loglevel=info
    networks:
      - nft-trading-network

  # PostgreSQL database
  postgres:
    image: postgres:15-alpine
    environment:
      - POSTGRES_DB=nft_trading_bot
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=password
    ports:
      - "5433:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./scripts/init-db.sql:/docker-entrypoint-initdb.d/init-db.sql:ro
    networks:
      - nft-trading-network
    # Add this to create both databases
    command: |
      bash -c "
        docker-entrypoint.sh postgres &
        sleep 10
        createdb -U postgres nft_trading_bot
        wait
      "

  # Redis for caching and Celery broker
  redis:
    image: redis:7-alpine
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    command: redis-server --appendonly yes
    networks:
      - nft-trading-network

  # Flower for Celery monitoring
  flower:
    build:
      context: .
      dockerfile: Dockerfile
    ports:
      - "5555:5555"
    environment:
      - CELERY_BROKER_URL=redis://redis:6379/0
      - CELERY_RESULT_BACKEND=redis://redis:6379/0
    depends_on:
      - redis
    command: python -m flower --app=core.celery_app --port=5555 --broker=redis://redis:6379/0
    networks:
      - nft-trading-network

  # Nginx reverse proxy (optional)
  nginx:
    image: nginx:alpine
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf:ro
      - ./ssl:/etc/nginx/ssl:ro
    depends_on:
      - api
    networks:
      - nft-trading-network
    profiles:
      - production

  # Prometheus for metrics (optional)
  prometheus:
    image: prom/prometheus:latest
    ports:
      - "9090:9090"
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'
    networks:
      - nft-trading-network
    profiles:
      - monitoring

  # Grafana for dashboards (optional)
  grafana:
    image: grafana/grafana:latest
    ports:
      - "3000:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=admin
    volumes:
      - grafana_data:/var/lib/grafana
      - ./monitoring/grafana/dashboards:/etc/grafana/provisioning/dashboards:ro
      - ./monitoring/grafana/datasources:/etc/grafana/provisioning/datasources:ro
    depends_on:
      - prometheus
    networks:
      - nft-trading-network
    profiles:
      - monitoring

volumes:
  postgres_data:
  redis_data:
  prometheus_data:
  grafana_data:

networks:
  nft-trading-network:
    driver: bridge

